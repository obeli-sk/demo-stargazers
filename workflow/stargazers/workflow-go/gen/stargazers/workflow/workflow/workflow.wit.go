// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package workflow represents the exported interface "stargazers:workflow/workflow".
package workflow

import (
	"go.bytecodealliance.org/cm"
)

// StarAdded represents the imported function "star-added".
//
// Called by the GitHub webhook when a star is added to a repository.
//
//	star-added: func(login: string, repo: string) -> result<_, string>
//
//go:nosplit
func StarAdded(login string, repo string) (result cm.Result[string, struct{}, string]) {
	login0, login1 := cm.LowerString(login)
	repo0, repo1 := cm.LowerString(repo)
	wasmimport_StarAdded((*uint8)(login0), (uint32)(login1), (*uint8)(repo0), (uint32)(repo1), &result)
	return
}

// StarAddedParallel represents the imported function "star-added-parallel".
//
// Parallel version of `star-added`.
//
//	star-added-parallel: func(login: string, repo: string) -> result<_, string>
//
//go:nosplit
func StarAddedParallel(login string, repo string) (result cm.Result[string, struct{}, string]) {
	login0, login1 := cm.LowerString(login)
	repo0, repo1 := cm.LowerString(repo)
	wasmimport_StarAddedParallel((*uint8)(login0), (uint32)(login1), (*uint8)(repo0), (uint32)(repo1), &result)
	return
}

// StarRemoved represents the imported function "star-removed".
//
// Called by the GitHub webhook when a star is removed from a repository.
//
//	star-removed: func(login: string, repo: string) -> result<_, string>
//
//go:nosplit
func StarRemoved(login string, repo string) (result cm.Result[string, struct{}, string]) {
	login0, login1 := cm.LowerString(login)
	repo0, repo1 := cm.LowerString(repo)
	wasmimport_StarRemoved((*uint8)(login0), (uint32)(login1), (*uint8)(repo0), (uint32)(repo1), &result)
	return
}

// Backfill represents the imported function "backfill".
//
// This workflow lists the current stargazers of a repository and calls `star-added`
// for each of them.
//
//	backfill: func(repo: string) -> result<_, string>
//
//go:nosplit
func Backfill(repo string) (result cm.Result[string, struct{}, string]) {
	repo0, repo1 := cm.LowerString(repo)
	wasmimport_Backfill((*uint8)(repo0), (uint32)(repo1), &result)
	return
}

// BackfillParallel represents the imported function "backfill-parallel".
//
// Parallel version of `backfill`.
//
//	backfill-parallel: func(repo: string) -> result<_, string>
//
//go:nosplit
func BackfillParallel(repo string) (result cm.Result[string, struct{}, string]) {
	repo0, repo1 := cm.LowerString(repo)
	wasmimport_BackfillParallel((*uint8)(repo0), (uint32)(repo1), &result)
	return
}
