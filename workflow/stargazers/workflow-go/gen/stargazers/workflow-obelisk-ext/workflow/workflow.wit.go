// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package workflow represents the imported interface "stargazers:workflow-obelisk-ext/workflow".
package workflow

import (
	"github.com/obeli-sk/demo-stargazers/workflow-go/gen/obelisk/types/execution"
	"go.bytecodealliance.org/cm"
)

// ExecutionID represents the type alias "stargazers:workflow-obelisk-ext/workflow#execution-id".
//
// See [execution.ExecutionID] for more information.
type ExecutionID = execution.ExecutionID

// JoinSetID represents the imported type alias "stargazers:workflow-obelisk-ext/workflow#join-set-id".
//
// See [execution.JoinSetID] for more information.
type JoinSetID = execution.JoinSetID

// AwaitNextExtensionError represents the type alias "stargazers:workflow-obelisk-ext/workflow#await-next-extension-error".
//
// See [execution.AwaitNextExtensionError] for more information.
type AwaitNextExtensionError = execution.AwaitNextExtensionError

// GetExtensionError represents the type alias "stargazers:workflow-obelisk-ext/workflow#get-extension-error".
//
// See [execution.GetExtensionError] for more information.
type GetExtensionError = execution.GetExtensionError

// StarAddedSubmit represents the imported function "star-added-submit".
//
//	star-added-submit: func(join-set-id: borrow<join-set-id>, login: string, repo:
//	string) -> execution-id
//
//go:nosplit
func StarAddedSubmit(joinSetID JoinSetID, login string, repo string) (result ExecutionID) {
	joinSetId0 := cm.Reinterpret[uint32](joinSetID)
	login0, login1 := cm.LowerString(login)
	repo0, repo1 := cm.LowerString(repo)
	wasmimport_StarAddedSubmit((uint32)(joinSetId0), (*uint8)(login0), (uint32)(login1), (*uint8)(repo0), (uint32)(repo1), &result)
	return
}

// StarAddedAwaitNext represents the imported function "star-added-await-next".
//
//	star-added-await-next: func(join-set-id: borrow<join-set-id>) -> result<tuple<execution-id,
//	result<_, string>>, await-next-extension-error>
//
//go:nosplit
func StarAddedAwaitNext(joinSetID JoinSetID) (result cm.Result[AwaitNextExtensionErrorShape, cm.Tuple[ExecutionID, cm.Result[string, struct{}, string]], AwaitNextExtensionError]) {
	joinSetId0 := cm.Reinterpret[uint32](joinSetID)
	wasmimport_StarAddedAwaitNext((uint32)(joinSetId0), &result)
	return
}

// StarAddedGet represents the imported function "star-added-get".
//
//	star-added-get: func(execution-id: execution-id) -> result<result<_, string>, get-extension-error>
//
//go:nosplit
func StarAddedGet(executionID ExecutionID) (result cm.Result[GetExtensionErrorShape, cm.Result[string, struct{}, string], GetExtensionError]) {
	executionId0, executionId1 := lower_ExecutionID(executionID)
	wasmimport_StarAddedGet((*uint8)(executionId0), (uint32)(executionId1), &result)
	return
}

// StarAddedParallelSubmit represents the imported function "star-added-parallel-submit".
//
//	star-added-parallel-submit: func(join-set-id: borrow<join-set-id>, login: string,
//	repo: string) -> execution-id
//
//go:nosplit
func StarAddedParallelSubmit(joinSetID JoinSetID, login string, repo string) (result ExecutionID) {
	joinSetId0 := cm.Reinterpret[uint32](joinSetID)
	login0, login1 := cm.LowerString(login)
	repo0, repo1 := cm.LowerString(repo)
	wasmimport_StarAddedParallelSubmit((uint32)(joinSetId0), (*uint8)(login0), (uint32)(login1), (*uint8)(repo0), (uint32)(repo1), &result)
	return
}

// StarAddedParallelAwaitNext represents the imported function "star-added-parallel-await-next".
//
//	star-added-parallel-await-next: func(join-set-id: borrow<join-set-id>) -> result<tuple<execution-id,
//	result<_, string>>, await-next-extension-error>
//
//go:nosplit
func StarAddedParallelAwaitNext(joinSetID JoinSetID) (result cm.Result[AwaitNextExtensionErrorShape, cm.Tuple[ExecutionID, cm.Result[string, struct{}, string]], AwaitNextExtensionError]) {
	joinSetId0 := cm.Reinterpret[uint32](joinSetID)
	wasmimport_StarAddedParallelAwaitNext((uint32)(joinSetId0), &result)
	return
}

// StarAddedParallelGet represents the imported function "star-added-parallel-get".
//
//	star-added-parallel-get: func(execution-id: execution-id) -> result<result<_, string>,
//	get-extension-error>
//
//go:nosplit
func StarAddedParallelGet(executionID ExecutionID) (result cm.Result[GetExtensionErrorShape, cm.Result[string, struct{}, string], GetExtensionError]) {
	executionId0, executionId1 := lower_ExecutionID(executionID)
	wasmimport_StarAddedParallelGet((*uint8)(executionId0), (uint32)(executionId1), &result)
	return
}

// StarRemovedSubmit represents the imported function "star-removed-submit".
//
//	star-removed-submit: func(join-set-id: borrow<join-set-id>, login: string, repo:
//	string) -> execution-id
//
//go:nosplit
func StarRemovedSubmit(joinSetID JoinSetID, login string, repo string) (result ExecutionID) {
	joinSetId0 := cm.Reinterpret[uint32](joinSetID)
	login0, login1 := cm.LowerString(login)
	repo0, repo1 := cm.LowerString(repo)
	wasmimport_StarRemovedSubmit((uint32)(joinSetId0), (*uint8)(login0), (uint32)(login1), (*uint8)(repo0), (uint32)(repo1), &result)
	return
}

// StarRemovedAwaitNext represents the imported function "star-removed-await-next".
//
//	star-removed-await-next: func(join-set-id: borrow<join-set-id>) -> result<tuple<execution-id,
//	result<_, string>>, await-next-extension-error>
//
//go:nosplit
func StarRemovedAwaitNext(joinSetID JoinSetID) (result cm.Result[AwaitNextExtensionErrorShape, cm.Tuple[ExecutionID, cm.Result[string, struct{}, string]], AwaitNextExtensionError]) {
	joinSetId0 := cm.Reinterpret[uint32](joinSetID)
	wasmimport_StarRemovedAwaitNext((uint32)(joinSetId0), &result)
	return
}

// StarRemovedGet represents the imported function "star-removed-get".
//
//	star-removed-get: func(execution-id: execution-id) -> result<result<_, string>,
//	get-extension-error>
//
//go:nosplit
func StarRemovedGet(executionID ExecutionID) (result cm.Result[GetExtensionErrorShape, cm.Result[string, struct{}, string], GetExtensionError]) {
	executionId0, executionId1 := lower_ExecutionID(executionID)
	wasmimport_StarRemovedGet((*uint8)(executionId0), (uint32)(executionId1), &result)
	return
}

// BackfillSubmit represents the imported function "backfill-submit".
//
//	backfill-submit: func(join-set-id: borrow<join-set-id>, repo: string) -> execution-id
//
//go:nosplit
func BackfillSubmit(joinSetID JoinSetID, repo string) (result ExecutionID) {
	joinSetId0 := cm.Reinterpret[uint32](joinSetID)
	repo0, repo1 := cm.LowerString(repo)
	wasmimport_BackfillSubmit((uint32)(joinSetId0), (*uint8)(repo0), (uint32)(repo1), &result)
	return
}

// BackfillAwaitNext represents the imported function "backfill-await-next".
//
//	backfill-await-next: func(join-set-id: borrow<join-set-id>) -> result<tuple<execution-id,
//	result<_, string>>, await-next-extension-error>
//
//go:nosplit
func BackfillAwaitNext(joinSetID JoinSetID) (result cm.Result[AwaitNextExtensionErrorShape, cm.Tuple[ExecutionID, cm.Result[string, struct{}, string]], AwaitNextExtensionError]) {
	joinSetId0 := cm.Reinterpret[uint32](joinSetID)
	wasmimport_BackfillAwaitNext((uint32)(joinSetId0), &result)
	return
}

// BackfillGet represents the imported function "backfill-get".
//
//	backfill-get: func(execution-id: execution-id) -> result<result<_, string>, get-extension-error>
//
//go:nosplit
func BackfillGet(executionID ExecutionID) (result cm.Result[GetExtensionErrorShape, cm.Result[string, struct{}, string], GetExtensionError]) {
	executionId0, executionId1 := lower_ExecutionID(executionID)
	wasmimport_BackfillGet((*uint8)(executionId0), (uint32)(executionId1), &result)
	return
}

// BackfillParallelSubmit represents the imported function "backfill-parallel-submit".
//
//	backfill-parallel-submit: func(join-set-id: borrow<join-set-id>, repo: string)
//	-> execution-id
//
//go:nosplit
func BackfillParallelSubmit(joinSetID JoinSetID, repo string) (result ExecutionID) {
	joinSetId0 := cm.Reinterpret[uint32](joinSetID)
	repo0, repo1 := cm.LowerString(repo)
	wasmimport_BackfillParallelSubmit((uint32)(joinSetId0), (*uint8)(repo0), (uint32)(repo1), &result)
	return
}

// BackfillParallelAwaitNext represents the imported function "backfill-parallel-await-next".
//
//	backfill-parallel-await-next: func(join-set-id: borrow<join-set-id>) -> result<tuple<execution-id,
//	result<_, string>>, await-next-extension-error>
//
//go:nosplit
func BackfillParallelAwaitNext(joinSetID JoinSetID) (result cm.Result[AwaitNextExtensionErrorShape, cm.Tuple[ExecutionID, cm.Result[string, struct{}, string]], AwaitNextExtensionError]) {
	joinSetId0 := cm.Reinterpret[uint32](joinSetID)
	wasmimport_BackfillParallelAwaitNext((uint32)(joinSetId0), &result)
	return
}

// BackfillParallelGet represents the imported function "backfill-parallel-get".
//
//	backfill-parallel-get: func(execution-id: execution-id) -> result<result<_, string>,
//	get-extension-error>
//
//go:nosplit
func BackfillParallelGet(executionID ExecutionID) (result cm.Result[GetExtensionErrorShape, cm.Result[string, struct{}, string], GetExtensionError]) {
	executionId0, executionId1 := lower_ExecutionID(executionID)
	wasmimport_BackfillParallelGet((*uint8)(executionId0), (uint32)(executionId1), &result)
	return
}
