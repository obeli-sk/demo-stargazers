// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package time represents the imported interface "obelisk:types/time@3.0.0".
package time

import (
	"go.bytecodealliance.org/cm"
)

// Duration represents the variant "obelisk:types/time@3.0.0#duration".
//
//	variant duration {
//		milliseconds(u64),
//		seconds(u64),
//		minutes(u32),
//		hours(u32),
//		days(u32),
//	}
type Duration cm.Variant[uint8, uint64, uint64]

// DurationMilliseconds returns a [Duration] of case "milliseconds".
func DurationMilliseconds(data uint64) Duration {
	return cm.New[Duration](0, data)
}

// Milliseconds returns a non-nil *[uint64] if [Duration] represents the variant case "milliseconds".
func (self *Duration) Milliseconds() *uint64 {
	return cm.Case[uint64](self, 0)
}

// DurationSeconds returns a [Duration] of case "seconds".
func DurationSeconds(data uint64) Duration {
	return cm.New[Duration](1, data)
}

// Seconds returns a non-nil *[uint64] if [Duration] represents the variant case "seconds".
func (self *Duration) Seconds() *uint64 {
	return cm.Case[uint64](self, 1)
}

// DurationMinutes returns a [Duration] of case "minutes".
func DurationMinutes(data uint32) Duration {
	return cm.New[Duration](2, data)
}

// Minutes returns a non-nil *[uint32] if [Duration] represents the variant case "minutes".
func (self *Duration) Minutes() *uint32 {
	return cm.Case[uint32](self, 2)
}

// DurationHours returns a [Duration] of case "hours".
func DurationHours(data uint32) Duration {
	return cm.New[Duration](3, data)
}

// Hours returns a non-nil *[uint32] if [Duration] represents the variant case "hours".
func (self *Duration) Hours() *uint32 {
	return cm.Case[uint32](self, 3)
}

// DurationDays returns a [Duration] of case "days".
func DurationDays(data uint32) Duration {
	return cm.New[Duration](4, data)
}

// Days returns a non-nil *[uint32] if [Duration] represents the variant case "days".
func (self *Duration) Days() *uint32 {
	return cm.Case[uint32](self, 4)
}

var _DurationStrings = [5]string{
	"milliseconds",
	"seconds",
	"minutes",
	"hours",
	"days",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v Duration) String() string {
	return _DurationStrings[v.Tag()]
}

// DateTime represents the record "obelisk:types/time@3.0.0#datetime".
//
// A time and date in seconds plus nanoseconds.
// Extracted from wasi:clocks@0.2.0 to avoid dependency on wasi:io
//
//	record datetime {
//		seconds: u64,
//		nanoseconds: u32,
//	}
type DateTime struct {
	_           cm.HostLayout `json:"-"`
	Seconds     uint64        `json:"seconds"`
	Nanoseconds uint32        `json:"nanoseconds"`
}

// ScheduleAt represents the variant "obelisk:types/time@3.0.0#schedule-at".
//
//	variant schedule-at {
//		now,
//		at(datetime),
//		in(duration),
//	}
type ScheduleAt cm.Variant[uint8, DateTimeShape, DateTime]

// ScheduleAtNow returns a [ScheduleAt] of case "now".
func ScheduleAtNow() ScheduleAt {
	var data struct{}
	return cm.New[ScheduleAt](0, data)
}

// Now returns true if [ScheduleAt] represents the variant case "now".
func (self *ScheduleAt) Now() bool {
	return self.Tag() == 0
}

// ScheduleAtAt returns a [ScheduleAt] of case "at".
func ScheduleAtAt(data DateTime) ScheduleAt {
	return cm.New[ScheduleAt](1, data)
}

// At returns a non-nil *[DateTime] if [ScheduleAt] represents the variant case "at".
func (self *ScheduleAt) At() *DateTime {
	return cm.Case[DateTime](self, 1)
}

// ScheduleAtIn returns a [ScheduleAt] of case "in".
func ScheduleAtIn(data Duration) ScheduleAt {
	return cm.New[ScheduleAt](2, data)
}

// In returns a non-nil *[Duration] if [ScheduleAt] represents the variant case "in".
func (self *ScheduleAt) In() *Duration {
	return cm.Case[Duration](self, 2)
}

var _ScheduleAtStrings = [3]string{
	"now",
	"at",
	"in",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v ScheduleAt) String() string {
	return _ScheduleAtStrings[v.Tag()]
}
