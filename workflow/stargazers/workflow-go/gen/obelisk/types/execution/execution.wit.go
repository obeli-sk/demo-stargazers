// Code generated by wit-bindgen-go. DO NOT EDIT.

// Package execution represents the imported interface "obelisk:types/execution@2.0.0".
package execution

import (
	"go.bytecodealliance.org/cm"
)

// JoinSetID represents the imported resource "obelisk:types/execution@2.0.0#join-set-id".
//
//	resource join-set-id
type JoinSetID cm.Resource

// ResourceDrop represents the imported resource-drop for resource "join-set-id".
//
// Drops a resource handle.
//
//go:nosplit
func (self JoinSetID) ResourceDrop() {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_JoinSetIDResourceDrop((uint32)(self0))
	return
}

// ID represents the imported method "id".
//
//	id: func() -> string
//
//go:nosplit
func (self JoinSetID) ID() (result string) {
	self0 := cm.Reinterpret[uint32](self)
	wasmimport_JoinSetIDID((uint32)(self0), &result)
	return
}

// ExecutionID represents the record "obelisk:types/execution@2.0.0#execution-id".
//
//	record execution-id {
//		id: string,
//	}
type ExecutionID struct {
	_  cm.HostLayout `json:"-"`
	ID string        `json:"id"`
}

// DelayID represents the record "obelisk:types/execution@2.0.0#delay-id".
//
//	record delay-id {
//		id: string,
//	}
type DelayID struct {
	_  cm.HostLayout `json:"-"`
	ID string        `json:"id"`
}

// ExecutionFailed represents the record "obelisk:types/execution@2.0.0#execution-failed".
//
//	record execution-failed {
//		execution-id: execution-id,
//	}
type ExecutionFailed struct {
	_           cm.HostLayout `json:"-"`
	ExecutionID ExecutionID   `json:"execution-id"`
}

// Function represents the record "obelisk:types/execution@2.0.0#function".
//
//	record function {
//		interface-name: string,
//		function-name: string,
//	}
type Function struct {
	_ cm.HostLayout `json:"-"`
	// `namespace:pkg_name/ifc_name` or `namespace:pkg_name/ifc_name@version`
	InterfaceName string `json:"interface-name"`
	FunctionName  string `json:"function-name"`
}

// ResponseID represents the variant "obelisk:types/execution@2.0.0#response-id".
//
//	variant response-id {
//		execution-id(execution-id),
//		delay-id(delay-id),
//	}
type ResponseID cm.Variant[uint8, ExecutionIDShape, ExecutionID]

// ResponseIDExecutionID returns a [ResponseID] of case "execution-id".
func ResponseIDExecutionID(data ExecutionID) ResponseID {
	return cm.New[ResponseID](0, data)
}

// ExecutionID returns a non-nil *[ExecutionID] if [ResponseID] represents the variant case "execution-id".
func (self *ResponseID) ExecutionID() *ExecutionID {
	return cm.Case[ExecutionID](self, 0)
}

// ResponseIDDelayID returns a [ResponseID] of case "delay-id".
func ResponseIDDelayID(data DelayID) ResponseID {
	return cm.New[ResponseID](1, data)
}

// DelayID returns a non-nil *[DelayID] if [ResponseID] represents the variant case "delay-id".
func (self *ResponseID) DelayID() *DelayID {
	return cm.Case[DelayID](self, 1)
}

var _ResponseIDStrings = [2]string{
	"execution-id",
	"delay-id",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v ResponseID) String() string {
	return _ResponseIDStrings[v.Tag()]
}

// FunctionMismatch represents the record "obelisk:types/execution@2.0.0#function-mismatch".
//
//	record function-mismatch {
//		specified-function: function,
//		actual-function: option<function>,
//		actual-id: response-id,
//	}
type FunctionMismatch struct {
	_ cm.HostLayout `json:"-"`
	// Workflow requested function
	SpecifiedFunction Function `json:"specified-function"`

	// What was found actually during execution. None if delay was found as next unprocessed
	// response.
	ActualFunction cm.Option[Function] `json:"actual-function"`
	ActualID       ResponseID          `json:"actual-id"`
}

// AwaitNextExtensionError represents the variant "obelisk:types/execution@2.0.0#await-next-extension-error".
//
// Error that is thrown by `-await-next` extension functions.
//
//	variant await-next-extension-error {
//		execution-failed(execution-failed),
//		all-processed,
//		function-mismatch(function-mismatch),
//	}
type AwaitNextExtensionError cm.Variant[uint8, FunctionMismatchShape, FunctionMismatch]

// AwaitNextExtensionErrorExecutionFailed returns a [AwaitNextExtensionError] of case "execution-failed".
//
// Execution response was awaited and marked as processed, but it finished with an
// error.
func AwaitNextExtensionErrorExecutionFailed(data ExecutionFailed) AwaitNextExtensionError {
	return cm.New[AwaitNextExtensionError](0, data)
}

// ExecutionFailed returns a non-nil *[ExecutionFailed] if [AwaitNextExtensionError] represents the variant case "execution-failed".
func (self *AwaitNextExtensionError) ExecutionFailed() *ExecutionFailed {
	return cm.Case[ExecutionFailed](self, 0)
}

// AwaitNextExtensionErrorAllProcessed returns a [AwaitNextExtensionError] of case "all-processed".
//
// All submitted requests and their responses of specified function and join set were
// already processed.
func AwaitNextExtensionErrorAllProcessed() AwaitNextExtensionError {
	var data struct{}
	return cm.New[AwaitNextExtensionError](1, data)
}

// AllProcessed returns true if [AwaitNextExtensionError] represents the variant case "all-processed".
func (self *AwaitNextExtensionError) AllProcessed() bool {
	return self.Tag() == 1
}

// AwaitNextExtensionErrorFunctionMismatch returns a [AwaitNextExtensionError] of case "function-mismatch".
//
// Execution response was awaited and marked as processed, but it belongs to a different
// function.
// This can happen when join set contains responses of multiple functions or delay
// requests.
func AwaitNextExtensionErrorFunctionMismatch(data FunctionMismatch) AwaitNextExtensionError {
	return cm.New[AwaitNextExtensionError](2, data)
}

// FunctionMismatch returns a non-nil *[FunctionMismatch] if [AwaitNextExtensionError] represents the variant case "function-mismatch".
func (self *AwaitNextExtensionError) FunctionMismatch() *FunctionMismatch {
	return cm.Case[FunctionMismatch](self, 2)
}

var _AwaitNextExtensionErrorStrings = [3]string{
	"execution-failed",
	"all-processed",
	"function-mismatch",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v AwaitNextExtensionError) String() string {
	return _AwaitNextExtensionErrorStrings[v.Tag()]
}

// GetExtensionError represents the variant "obelisk:types/execution@2.0.0#get-extension-error".
//
// Error that is thrown by `-get` extension functions.
//
//	variant get-extension-error {
//		execution-failed(execution-failed),
//		function-mismatch(function-mismatch),
//		not-found-in-processed-responses,
//	}
type GetExtensionError cm.Variant[uint8, FunctionMismatchShape, FunctionMismatch]

// GetExtensionErrorExecutionFailed returns a [GetExtensionError] of case "execution-failed".
//
// Execution is found in processed responses, but it finished with an error.
func GetExtensionErrorExecutionFailed(data ExecutionFailed) GetExtensionError {
	return cm.New[GetExtensionError](0, data)
}

// ExecutionFailed returns a non-nil *[ExecutionFailed] if [GetExtensionError] represents the variant case "execution-failed".
func (self *GetExtensionError) ExecutionFailed() *ExecutionFailed {
	return cm.Case[ExecutionFailed](self, 0)
}

// GetExtensionErrorFunctionMismatch returns a [GetExtensionError] of case "function-mismatch".
//
// Execution is found in processed responses, but it belongs to a different function.
// This can happen when join set contains responses of multiple functions.
func GetExtensionErrorFunctionMismatch(data FunctionMismatch) GetExtensionError {
	return cm.New[GetExtensionError](1, data)
}

// FunctionMismatch returns a non-nil *[FunctionMismatch] if [GetExtensionError] represents the variant case "function-mismatch".
func (self *GetExtensionError) FunctionMismatch() *FunctionMismatch {
	return cm.Case[FunctionMismatch](self, 1)
}

// GetExtensionErrorNotFoundInProcessedResponses returns a [GetExtensionError] of case "not-found-in-processed-responses".
//
// Processed responses do not contain the specified execution ID.
// This can happen if the execution was not marked as processed (awaited), or
// the execution ID does not belong to the specified join set.
func GetExtensionErrorNotFoundInProcessedResponses() GetExtensionError {
	var data struct{}
	return cm.New[GetExtensionError](2, data)
}

// NotFoundInProcessedResponses returns true if [GetExtensionError] represents the variant case "not-found-in-processed-responses".
func (self *GetExtensionError) NotFoundInProcessedResponses() bool {
	return self.Tag() == 2
}

var _GetExtensionErrorStrings = [3]string{
	"execution-failed",
	"function-mismatch",
	"not-found-in-processed-responses",
}

// String implements [fmt.Stringer], returning the variant case name of v.
func (v GetExtensionError) String() string {
	return _GetExtensionErrorStrings[v.Tag()]
}

// StubError represents the variant "obelisk:types/execution@2.0.0#stub-error".
//
//	variant stub-error {
//		conflict,
//	}
type StubError uint8

const (
	// Conflict can happen when a second writer attempts to stub a value, while the
	// value is not equal to the already stubbed value.
	StubErrorConflict StubError = iota
)

var _StubErrorStrings = [1]string{
	"conflict",
}

// String implements [fmt.Stringer], returning the enum case name of e.
func (e StubError) String() string {
	return _StubErrorStrings[e]
}

// MarshalText implements [encoding.TextMarshaler].
func (e StubError) MarshalText() ([]byte, error) {
	return []byte(e.String()), nil
}

// UnmarshalText implements [encoding.TextUnmarshaler], unmarshaling into an enum
// case. Returns an error if the supplied text is not one of the enum cases.
func (e *StubError) UnmarshalText(text []byte) error {
	return _StubErrorUnmarshalCase(e, text)
}

var _StubErrorUnmarshalCase = cm.CaseUnmarshaler[StubError](_StubErrorStrings[:])
