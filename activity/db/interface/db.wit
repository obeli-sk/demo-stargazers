package stargazers:db;

interface user {
    record stargazer {
        login: string,
        repo: string,
        description: option<string>,
    }

    enum ordering {
        ascending,
        descending,
    }

    /// A user has stared a repo. Persist the user, relation and the repo if needed.
    /// Returns the user's description if already present.
    add-star-get-description: func(login: string, repo: string) -> result<option<string>, string>;
    /// A user has unstarred a repo. Delete the user if there are no other relations.
    remove-star: func(login: string, repo: string) -> result<_, string>;
    /// Update the description of a user.
    /// User must exist at this point, if not, the operation should fail.
    update-user-description: func(username: string, description: string) -> result<_, string>;
    /// Return last few stargazers from the database.
    list-stargazers: func(last: u8, repo: option<string>, ordering: ordering) -> result<list<stargazer>, string>;
}

interface llm {
    /// Return a string containing JSON configuration for the `llm` activity.
    get-settings-json: func() -> result<string, string>;
}
